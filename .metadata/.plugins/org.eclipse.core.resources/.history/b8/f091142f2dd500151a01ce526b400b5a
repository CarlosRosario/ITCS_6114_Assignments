import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;


public class Qsort {

	public static void main(String[] args) {
		int[] numbers;
		String inputFile = args[0];
		
		try {
			// Read file
			numbers = readFile(inputFile);
			
			// Insertion sort
			double start = System.currentTimeMillis();
			quickSort(numbers, 0, numbers.length - 1);
			double end = System.currentTimeMillis();
			
			for(int i = 0; i < numbers.length; i++){
				System.out.println(numbers[i]);
			}
			
			System.out.println(start);
			System.out.println(end);
			System.out.println(end-start);
			
			// Write output
			writeFile(numbers, end-start);
		}
		catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		// pass length - 1 for right parameter. pass 0 for left parameter
		//int[] testArray = {14, 12, 1, 2, 4, 9, 90, -1, 3,3};
		//quickSort(testArray, 0, testArray.length - 1);
		

	}
	
	public static int[] readFile(String inputFile) throws FileNotFoundException{
		
		List<Integer> listOfNumbers = new ArrayList<Integer>();
		String[] numbers;
		Scanner scan = new Scanner(new File(inputFile));
		String fileContents = "";
		
		
		while (scan.hasNextLine()){
			fileContents = scan.nextLine();
		}
		scan.close();
		
		numbers = fileContents.split(";");
		
		for(String n: numbers){
			listOfNumbers.add(Integer.parseInt(n.trim()));
		}
		
		int[] returnArray = new int[listOfNumbers.size()];
		for(int i = 0; i < listOfNumbers.size(); i++){
			returnArray[i] = listOfNumbers.get(i);
		}
		
		return returnArray;
	}
	
	public static void writeFile(int[] numbers, double sortingTime) throws IOException{
		
		BufferedWriter outputWriter = null;
		outputWriter = new BufferedWriter(new FileWriter("answer.txt"));
		
		for(int i = 0; i < numbers.length; i++){
			if(i == numbers.length - 1){
				outputWriter.write(numbers[i] + "");
			}
			else {
				outputWriter.write(numbers[i] + "; " );	
			}
		}
		
		outputWriter.flush();
		outputWriter.close();
		
	}
	
	public static void quickSort(int A[], int left, int right){
		int pivot = 0;
		if(left < right){
			pivot = partition(A, left, right);
			quickSort(A, left, pivot - 1);
			quickSort(A, pivot + 1, right);
		}
	}
	
	public static int partition(int[] A, int left, int right){
		int lastElement = A[right];
		int i = left - 1; 
		
		for(int j = left; j < right; j++){
			if(A[j] <= lastElement){
				i++;
				// swap A[i] with A[j]
				int temp = A[i];
				A[i] = A[j];
				A[j] = temp;
				
			}
		}
		// exchange A[i+1] with A[right]
		int temp = A[i+1];
		A[i+1] = A[right];
		A[right] = temp;
		
		return i+1;
	}
}
